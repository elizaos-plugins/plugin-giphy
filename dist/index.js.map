{"version":3,"sources":["../src/actions/sendGif.ts","../src/utils/debug.ts","../src/environment.ts","../src/index.ts"],"sourcesContent":["// src/actions/sendGif.ts\n\nimport {\n    composeContext,\n    type Content,\n    elizaLogger,\n    generateObjectDeprecated,\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    ModelClass,\n    type State,\n    type Action,\n} from \"@elizaos/core\";\nimport axios from \"axios\";\nimport { debugLog } from \"../utils/debug\";\nimport { validateGiphyConfig } from \"../environment\";\nimport type { GifResponse, Gif } from \"../types\";\nimport crypto from \"node:crypto\";\n\nconst sendGifTemplate = `Given the message, determine if a gif should be sent based on the content.\nIf yes, extract relevant keywords or phrases to use as search terms for the gif.\n\nFormat the response as a JSON object with these fields:\n- trigger: boolean (whether to send a gif)\n- searchTerm: string (keywords to search for the gif, required if trigger is true)\n\nExample response:\n\\`\\`\\`json\n{\n    \"trigger\": true,\n    \"searchTerm\": \"pudgy penguins beach\"\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nAnalyze the above messages and decide whether to respond with a gif. If so, specify the search term.\n`;\n\nconst GIPHY_SEARCH_ENDPOINT = \"https://api.giphy.com/v1/gifs/search\";\n\nexport interface SendGifContent extends Content {\n    trigger: boolean;\n    searchTerm?: string;\n}\n\nexport default {\n    name: \"SEND_GIF\",\n    similes: [\"REPLY_WITH_GIF\", \"GIF_RESPONSE\"],\n    validate: async (runtime: IAgentRuntime, _message: Memory) => {\n        elizaLogger.log(\"üîÑ Validating Giphy configuration...\");\n        try {\n            const config = await validateGiphyConfig(runtime);\n            debugLog.validation(config);\n            return true;\n        } catch (error) {\n            debugLog.error(error);\n            return false;\n        }\n    },\n    description: \"Respond with a gif based on the user's message\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        elizaLogger.log(\"üöÄ Starting Giphy SEND_GIF handler...\");\n\n        // Initialize or update state\n        let currentState = state;\n        if (!currentState) {\n            elizaLogger.log(\"Creating new state...\");\n            currentState = (await runtime.composeState(message)) as State;\n        } else {\n            elizaLogger.log(\"Updating existing state...\");\n            currentState = await runtime.updateRecentMessageState(currentState);\n        }\n        try {\n            elizaLogger.log(\"Composing gif trigger context...\");\n            const gifContext = composeContext({\n                state: currentState,\n                template: sendGifTemplate,\n            });\n\n            elizaLogger.log(\"Generating content from context...\");\n            const content = (await generateObjectDeprecated({\n                runtime,\n                context: gifContext,\n                modelClass: ModelClass.LARGE,\n            })) as unknown as SendGifContent;\n\n            if (!content) {\n                throw new Error(\"Failed to parse gif trigger content\");\n            }\n\n            debugLog.validation(content);\n\n            if (!content.trigger || !content.searchTerm) {\n                elizaLogger.log(\"No gif triggered for this message.\");\n                return false;\n            }\n\n            const config = await validateGiphyConfig(runtime);\n\n            const requestParams = {\n                api_key: config.GIPHY_API_KEY,\n                q: content.searchTerm,\n                limit: 10,\n                rating: \"pg\",\n                lang: \"en\", // Optional: specify language for better results\n            };\n\n            debugLog.request(\"GET\", GIPHY_SEARCH_ENDPOINT, requestParams);\n\n            const response = await axios.get<GifResponse>(\n                GIPHY_SEARCH_ENDPOINT,\n                {\n                    params: requestParams,\n                }\n            );\n\n            debugLog.response(response);\n            elizaLogger.log(\n                \"Full Giphy API Response:\",\n                JSON.stringify(response.data, null, 2)\n            );\n\n            const gifs = response.data.data;\n            if (!gifs.length) {\n                throw new Error(\n                    `No gifs found for search term: ${content.searchTerm}`\n                );\n            }\n\n            // Filter out any non-GIF URLs just in case\n            const gifGifs = gifs.filter((gif) =>\n                gif.images.original.url.includes(\".gif\")\n            );\n            if (!gifGifs.length) {\n                throw new Error(\n                    `No valid GIFs found for search term: ${content.searchTerm}`\n                );\n            }\n\n            // Select a random gif from the filtered results\n            const selectedGif: Gif =\n                gifGifs[Math.floor(Math.random() * gifGifs.length)];\n            elizaLogger.log(\n                \"Selected GIF:\",\n                JSON.stringify(selectedGif, null, 2)\n            );\n\n            const gifUrl = selectedGif.images.original.url.split(\"?\")[0];\n\n            // Validate the URL structure\n            if (!gifUrl.endsWith(\".gif\")) {\n                throw new Error(`Invalid GIF URL format: ${gifUrl}`);\n            }\n\n            if (callback) {\n                const message = {\n                    text: \"Here's a GIF for you!\",\n                    attachments: [\n                        {\n                            id: crypto.randomUUID(),\n                            url: gifUrl, // Use the original Giphy URL directly\n                            title: \"Enjoy your GIF!\",\n                            source: \"giphyPlugin\",\n                            description: selectedGif.title,\n                            text: selectedGif.title,\n                            contentType: \"image/gif\",\n                            type: \"animation\",\n                        },\n                    ],\n                };\n                // No need for local file attachments anymore\n                elizaLogger.log(\"‚úÖ Sending callback with gif url:\", message);\n                callback(message);\n            }\n\n            // **Removed Immediate Deletion Here**\n\n            return true;\n        } catch (error) {\n            debugLog.error(error);\n            if (callback) {\n                callback({\n                    text: `Error fetching gif: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n                    content: {\n                        error:\n                            error instanceof Error\n                                ? error.message\n                                : \"Unknown error\",\n                    },\n                });\n            }\n            return false;\n        }\n    },\n    examples: [\n        [\n            // Example 1: Silly comment\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Send me a gif about pudgy penguins\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"Here's a pudgy penguins gif for you!\",\n                    action: \"SEND_GIF\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"https://media2.giphy.com/media/qP4CXhBeKJTbSzjNfC/giphy.gif\",\n                },\n            },\n        ],\n    ],\n} as Action;\n","import { elizaLogger } from \"@elizaos/core\";\n\nexport const debugLog = {\n    request: (method: string, url: string, data?: any) => {\n        elizaLogger.log(\"üåê API Request:\", {\n            method,\n            url,\n            data: data || \"No data\"\n        });\n    },\n\n    response: (response: any) => {\n        elizaLogger.log(\"‚úÖ API Response:\", {\n            status: response?.status,\n            data: response?.data || \"No data\"\n        });\n    },\n\n    error: (error: any) => {\n        elizaLogger.error(\"‚õî Error Details:\", {\n            message: error?.message,\n            response: {\n                status: error?.response?.status,\n                data: error?.response?.data\n            },\n            config: {\n                url: error?.config?.url,\n                method: error?.config?.method,\n                data: error?.config?.data\n            }\n        });\n    },\n\n    validation: (config: any) => {\n        elizaLogger.log(\"üîç Config Validation:\", config);\n    }\n};\n","import type { IAgentRuntime } from \"@elizaos/core\";\nimport { z } from \"zod\";\n\nexport const giphyEnvSchema = z.object({\n    GIPHY_API_KEY: z.string().min(1, \"Giphy API key is required\"),\n});\n\nexport type GiphyConfig = z.infer<typeof giphyEnvSchema>;\n\nexport async function validateGiphyConfig(\n    runtime: IAgentRuntime\n): Promise<GiphyConfig> {\n    try {\n        const config = {\n            GIPHY_API_KEY: runtime.getSetting(\"GIPHY_API_KEY\"),\n        };\n        return giphyEnvSchema.parse(config);\n    } catch (error) {\n        if (error instanceof z.ZodError) {\n            const errorMessages = error.errors\n                .map((err) => `${err.path.join(\".\")}: ${err.message}`)\n                .join(\"\\n\");\n            throw new Error(\n                `Giphy configuration validation failed:\\n${errorMessages}`\n            );\n        }\n        throw error;\n    }\n}\n","import type { Plugin } from \"@elizaos/core\";\nimport sendGif from \"./actions/sendGif\";\n\nexport const giphyPlugin: Plugin = {\n    name: \"giphy\",\n    description: \"Giphy Plugin for Eliza to send GIFs in responses\",\n    actions: [\n        sendGif\n    ],\n    evaluators: [],\n    providers: [],\n};\n\nexport default giphyPlugin;\n"],"mappings":"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","names":["elizaLogger","elizaLogger","message"]}